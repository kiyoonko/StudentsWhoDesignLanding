{"version":3,"sources":["images/logo.svg","images/background.svg","images/ApplyButton.svg","images/requestButton.svg","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Landing","landingBackground","backgroundImage","background","backgroundSize","height","style","Navbar","Brand","href","position","marginTop","marginLeft","width","alt","src","logo","Nav","className","marginRight","Link","id","paddingTop","applyButton","requestButton","Component","App","generalStyle","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,2TCUtBC,G,uLAGb,IAIMC,EAAoB,CACtBC,gBAAgB,OAAD,OAASC,IAAT,KACfC,eAAgB,QAChBC,OAAQ,SAiCZ,OACI,yBAAKC,MAASL,GACV,kBAACM,EAAA,EAAD,KACI,kBAACA,EAAA,EAAOC,MAAR,CAAcC,KAAK,QAAQH,MAjCrB,CACdI,SAAU,WACVC,UAAW,MACXC,WAAY,MACZP,OAAQ,OACRQ,MAAO,SA6BC,yBACIC,IAAI,GACJC,IAAKC,IACLH,MAAM,KACNR,OAAO,QAIX,kBAACY,EAAA,EAAD,CAAKC,UAAU,UAAUZ,MAlCpB,CACba,YAAa,MACbR,UAAW,UAiCC,kBAACM,EAAA,EAAIG,KAAL,CAAUF,UAAU,UAAUT,KAAK,UAAnC,SACA,kBAACQ,EAAA,EAAIG,KAAL,CAAUF,UAAU,UAAUT,KAAK,YAAnC,WACA,kBAACQ,EAAA,EAAIG,KAAL,CAAUF,UAAU,UAAUT,KAAK,SAAnC,QACA,kBAACQ,EAAA,EAAIG,KAAL,CAAUF,UAAU,UAAUT,KAAK,YAAnC,aAGR,yBAAKY,GAAK,OAAOf,MA3DJ,CACjBgB,WAAY,WA2DJ,wBAAIJ,UAAU,MAAd,4BACA,wBAAIA,UAAU,MAAd,mCACA,0BAAMA,UAAU,aAAhB,sCAEJ,yBAAKZ,MAzCO,CAChBa,YAAa,MACbR,UAAW,SAwCH,yBAAKL,MArCD,CACZM,WAAY,QAqCA,uBAAGH,KAAK,IACJ,yBAAKM,IAAKQ,IAAaT,IAAM,eAEjC,uBAAGR,MArCE,CACjBM,WAAY,SAoC0BH,KAAK,IAC3B,yBAAKM,IAAKS,IAAeV,IAAM,wBAI3C,yBAAKR,MAtCU,CACnBK,UAAW,UAsCH,uBAAGF,KAAK,IACJ,0BAAMS,UAAU,aAAhB,2D,GA/EaO,cCL/BC,G,uLAEF,OACE,yBAAKpB,MAASqB,GACZ,kBAAC,EAAD,W,GAJUF,cAUZE,EAAe,CACnBC,gBAAiB,WAGJF,ICPKG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.94b9a54d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.01974e99.svg\";","module.exports = __webpack_public_path__ + \"static/media/background.b9da22f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/ApplyButton.66fcc5dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/requestButton.4cd58557.svg\";","import React, { Component } from 'react'\n//import Header from './Header'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport logo from '../images/logo.svg'\nimport background from '../images/background.svg'\nimport applyButton from '../images/ApplyButton.svg'\nimport requestButton from '../images/requestButton.svg'\nimport './landing.css'\n\nexport default class Landing extends Component {\n    render() {\n\n        const landingStyle = {\n            paddingTop: '12.5vh'\n        }\n        \n        const landingBackground = {\n            backgroundImage: `url(${background})`,\n            backgroundSize: 'cover',\n            height: '100vh'\n        }\n\n        const logoStyle = {\n            position: 'relative',\n            marginTop: '5vh',\n            marginLeft: '8vw',\n            height: '75px',\n            width: '75px'\n        }\n\n        const navStyle = {\n            marginRight: '8vw',\n            marginTop: '5.5vh',\n        }\n\n        const buttonStyle = {\n            marginRight: '8vw',\n            marginTop: '13vh'\n        }\n\n        const buttons = {\n            marginLeft: '8vw'\n        }\n\n        const secondButton = {\n            marginLeft: '2.5vw'\n        }\n\n        const portfolioStyle = {\n            marginTop: '2.5vh',\n        }\n\n        return (\n            <div style = {landingBackground}>\n                <Navbar>\n                    <Navbar.Brand href=\"#home\" style = {logoStyle}>\n                    <img\n                        alt=\"\"\n                        src={logo}\n                        width=\"75\"\n                        height=\"75\"\n                    />\n                    </Navbar.Brand>\n\n                    <Nav className=\"ml-auto\" style = {navStyle}>\n                        <Nav.Link className=\"navList\" href=\"#apply\">APPLY</Nav.Link>\n                        <Nav.Link className=\"navList\" href=\"#podcast\">PODCAST</Nav.Link>\n                        <Nav.Link className=\"navList\" href=\"#blog\">BLOG</Nav.Link>\n                        <Nav.Link className=\"navList\" href=\"#contact\">CONTACT</Nav.Link>\n                    </Nav>\n                </Navbar>\n                <div id = \"home\" style = {landingStyle}>\n                    <h1 className=\"h1\">A product design program</h1>\n                    <h1 className=\"h1\">that's free until you're hired.</h1>\n                    <text className=\"subSlogan\">You're guaranteed your dream job.</text>\n                </div>\n                <div style = {buttonStyle}>\n                    <div style = {buttons}>\n                        <a href=\"\">\n                            <img src={applyButton} alt = \"apply now\"/>\n                        </a>\n                        <a style = {secondButton} href=\"\">\n                            <img src={requestButton} alt = \"request syllabus\"/>\n                        </a>\n                    </div>\n                </div>\n                <div style = {portfolioStyle}>\n                    <a href=\"\">\n                        <text className=\"subSlogan\">Sign up for a 15 minute portfolio review â†’ </text>\n                    </a>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport Landing from './components/Landing'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component{\n  render(){\n    return (\n      <div style = {generalStyle}>\n        <Landing />\n      </div>\n    );\n  }\n}\n\nconst generalStyle = {\n  backgroundColor: '#e5e5e5'\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}